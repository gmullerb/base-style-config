<?xml version="1.0"?>
<!-- Copyright (c) 2018 Gonzalo MÃ¼ller Bravo. -->
<!-- Licensed under the MIT License (MIT), see LICENSE.txt -->
<ruleset name="CodingRules"
         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
  <description>
    Java Code Rules
  </description>
  <rule ref="category/java/bestpractices.xml">
    <exclude name="JUnitAssertionsShouldIncludeMessage"/>
    <exclude name="JUnitTestContainsTooManyAsserts"/>
    <exclude name="JUnitTestsShouldIncludeAssert"/>
    <exclude name="OneDeclarationPerLine"/>
    <exclude name="SwitchStmtsShouldHaveDefault"/>
  </rule>
  <rule ref="category/java/bestpractices.xml/AvoidStringBufferField">
    <priority>4</priority>
  </rule>
  <rule ref="category/java/codestyle.xml">
    <exclude name="AtLeastOneConstructor"/>
    <exclude name="AvoidFinalLocalVariable"/>
    <exclude name="CallSuperInConstructor"/>
    <exclude name="ConfusingTernary"/>
    <exclude name="FieldNamingConventions"/>
    <exclude name="FormalParameterNamingConventions"/>
    <exclude name="GenericsNaming"/>
    <exclude name="LocalVariableNamingConventions"/>
    <exclude name="LongVariable"/>
    <exclude name="OnlyOneReturn"/>
    <exclude name="ShortClassName"/>
    <exclude name="ShortMethodName"/>
    <exclude name="ShortVariable"/>
  </rule>
  <rule ref="category/java/codestyle.xml/ClassNamingConventions">
    <properties>
      <property name="classPattern" value="^.*$"/>
      <property name="abstractClassPattern" value="^.*$"/>
      <property name="interfacePattern" value="^.*$"/>
      <property name="enumPattern" value="^.*$"/>
      <property name="annotationPattern" value="^.*$"/>
      <property name="utilityClassPattern" value="^([A-Z][a-z0-9]([A-Z]?[a-z0-9]+)*)?(Factory|Mappers?|Utils?|Helper)$"/>
      <property name="violationSuppressXPath" value="/TypeDeclaration/ClassOrInterfaceDeclaration[not(ends-with(@Image,'Test')) or ends-with(@Image,'ForTest')]"/>
    </properties>
  </rule>
  <rule ref="category/java/codestyle.xml/MethodNamingConventions">
    <properties>
      <property name="methodPattern" value="^afterAll$|^afterEach$|^beforeAll$|^beforeEach$|^should[A-Z]([a-z0-9]{1}[A-Z]?)*$"/>
      <property name="nativePattern" value="^afterAll$|^afterEach$|^beforeAll$|^beforeEach$|^should[A-Z]([a-z0-9]{1}[A-Z]?)*$"/>
      <property name="staticPattern" value="^[a-z]([A-Z][a-z0-9]|[a-z0-9][A-Z]|[a-z0-9]{2}){1}([A-Z]?[a-z0-9]{1}){0,19}[a-zA-Z0-9]?$"/>
      <property name="junit4TestPattern" value="^afterAll$|^afterEach$|^beforeAll$|^beforeEach$|^should[A-Z]([a-z0-9]{1}[A-Z]?)*$"/>
      <property name="violationSuppressXPath" value="/TypeDeclaration/ClassOrInterfaceDeclaration[not(ends-with(@Image,'Test')) or ends-with(@Image,'ForTest')]"/>
    </properties>
  </rule>
  <rule ref="category/java/codestyle.xml/UselessParentheses">
    <properties>
      <property name="violationSuppressXPath" value=".[./ConditionalAndExpression or ./ConditionalOrExpression]"/>
    </properties>
  </rule>
  <rule ref="category/java/codestyle.xml/TooManyStaticImports">
    <properties>
      <property name="violationSuppressXPath" value="/TypeDeclaration/ClassOrInterfaceDeclaration[ends-with(@Image,'Test')]"/>
    </properties>
  </rule>
  <rule ref="category/java/design.xml">
    <exclude name="AvoidCatchingGenericException"/>
    <exclude name="AvoidDeeplyNestedIfStmts"/>
    <exclude name="CyclomaticComplexity"/>
    <exclude name="DataClass"/>
    <exclude name="ExcessiveMethodLength"/>
    <exclude name="LawOfDemeter"/>
    <exclude name="LoosePackageCoupling"/>
  </rule>
  <rule ref="category/java/design.xml/ExcessiveImports">
    <properties>
      <property name="violationSuppressXPath" value="/TypeDeclaration/ClassOrInterfaceDeclaration[ends-with(@Image,'e2eTest') or ends-with(@Image,'E2eTest')]"/>
    </properties>
  </rule>

  <rule ref="category/java/design.xml/ExcessivePublicCount">
    <properties>
      <property name="violationSuppressXPath" value="/TypeDeclaration/ClassOrInterfaceDeclaration[ends-with(@Image,'Test')]"/>
    </properties>
  </rule>
  <rule ref="category/java/design.xml/SignatureDeclareThrowsException">
    <properties>
      <property name="violationSuppressXPath" value="/TypeDeclaration/ClassOrInterfaceDeclaration[ends-with(@Image,'Test')]"/>
    </properties>
  </rule>
  <rule ref="category/java/design.xml/TooManyFields">
    <properties>
      <property name="maxfields" value="7"/>
      <property name="violationSuppressXPath" value="/TypeDeclaration/ClassOrInterfaceDeclaration[ends-with(@Image,'Test')]"/>
    </properties>
  </rule>
  <rule ref="category/java/design.xml/TooManyMethods">
    <properties>
      <property name="maxmethods" value="25"/>
      <property name="violationSuppressXPath" value="/TypeDeclaration/ClassOrInterfaceDeclaration[ends-with(@Image,'Test')]"/>
    </properties>
  </rule>
  <rule ref="category/java/design.xml/UseUtilityClass">
    <properties>
      <property name="violationSuppressXPath"
                value="/TypeDeclaration/ClassOrInterfaceDeclaration/ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/MethodDeclaration[@Name = 'main' and @Static='true' and @Public='true']"/>
    </properties>
  </rule>
  <rule ref="category/java/errorprone.xml">
    <exclude name="AssignmentInOperand"/>
    <exclude name="AvoidLiteralsInIfCondition"/>
    <exclude name="AvoidMultipleUnaryOperators"/>
    <exclude name="BadComparison"/>
    <exclude name="DataflowAnomalyAnalysis"/>
    <exclude name="JumbledIncrementer"/>
    <exclude name="LoggerIsNotStaticFinal"/>
    <exclude name="MissingBreakInSwitch"/>
    <exclude name="NonCaseLabelInSwitchStatement"/>
    <exclude name="NullAssignment"/>
    <exclude name="UseLocaleWithCaseConversions"/>
  </rule>
  <rule ref="category/java/errorprone.xml/AvoidDuplicateLiterals">
    <properties>
      <property name="violationSuppressXPath" value="/TypeDeclaration/ClassOrInterfaceDeclaration[ends-with(@Image,'Test')]"/>
    </properties>
  </rule>
   <rule ref="category/java/errorprone.xml/BeanMembersShouldSerialize">
    <properties>
      <property name="violationSuppressXPath" value="/TypeDeclaration[(child::ClassOrInterfaceDeclaration[not(child::ImplementsList) or child::ImplementsList[not(descendant::ClassOrInterfaceType[@Image='Serializable' or @Image='java.io.Serializable'])]]) and (not(child::Annotation) or not(child::Annotation/MarkerAnnotation/Name[@Image='Entity' or @Image='javax.persistence.Entity']))]"/>
    </properties>
  </rule>
  <rule ref="category/java/multithreading.xml">
    <exclude name="AvoidUsingVolatile"/>
    <exclude name="UseConcurrentHashMap"/>
  </rule>
  <rule ref="category/java/performance.xml">
    <exclude name="AvoidInstantiatingObjectsInLoops"/>
  </rule>
  <rule ref="category/java/security.xml"/>
  <!-- Custom rules -->
  <rule
    name="AvoidFieldInjection"
    language="java"
    message="Do not use Field injection"
    class="net.sourceforge.pmd.lang.rule.XPathRule">
    <priority>3</priority>
    <properties>
      <property name="violationSuppressXPath" value="/TypeDeclaration/ClassOrInterfaceDeclaration[ends-with(@Image,'Test')]"/>
      <property name="xpath">
        <value><![CDATA[//FieldDeclaration/preceding-sibling::Annotation/MarkerAnnotation/Name[@Image='Inject' or @Image='javax.inject.Inject' or @Image='com.google.inject.Inject' or @Image='Autowired' or @Image='org.springframework.beans.factory.annotation.Autowired']]]></value>
      </property>
    </properties>
  </rule>
  <rule
    name="LongMethodName"
    language="java"
    message="Avoid excessively long methods names like {0}"
    class="net.sourceforge.pmd.lang.rule.XPathRule">
    <priority>3</priority>
    <properties>
      <property name="violationSuppressXPath" value="/TypeDeclaration/ClassOrInterfaceDeclaration[ends-with(@Image,'Test')]"/>
      <property name="xpath">
        <value><![CDATA[//MethodDeclarator[string-length(@Image) > 23]]]></value>
      </property>
    </properties>
  </rule>
</ruleset>
