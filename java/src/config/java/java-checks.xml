<?xml version="1.0"?>
<!-- Copyright (c) 2018 Gonzalo MÃ¼ller Bravo. -->
<!-- Licensed under the MIT License (MIT), see LICENSE.txt -->
<!DOCTYPE module PUBLIC
    "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
    "https://checkstyle.org/dtds/configuration_1_3.dtd">
<module name="Checker">
  <property name="fileExtensions" value="java"/>
  <module name="JavadocPackage"/>
  <module name="SuppressWarningsFilter"/>
  <module name="TreeWalker">
    <property name="severity" value="error"/>
    <module name="SuppressWarningsHolder"/>
    <!-- Annotations -->
    <module name="AnnotationLocation">
      <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>
    </module>
    <module name="AnnotationLocation">
      <property name="id" value="AnnotationLocationVariable"/>
      <property name="allowSamelineMultipleAnnotations" value="true"/>
      <property name="allowSamelineSingleParameterlessAnnotation" value="false"/>
      <property name="tokens" value="VARIABLE_DEF"/>
    </module>
    <module name="AnnotationUseStyle"/>
    <module name="MissingOverride"/>
    <!-- Blocks -->
    <module name="AvoidNestedBlocks"/>
    <module name="DeclarationOrder">
      <property name="ignoreModifiers" value="true"/>
    </module>
    <module name="EmptyBlock"/>
    <module name="LeftCurly"/>
    <module name="NeedBraces">
      <property name="tokens" value="LITERAL_DO, LITERAL_FOR, LITERAL_WHILE"/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="id" value="CallOnlyOneMethodPerLineForChainedCall"/>
      <property name="format" value='[^\(]*\(.*\)\h*\.[^(]*\(' />
      <property name="ignoreComments" value="true"/>
      <message key="regexp.exceeded" value="Call only one chained method per line: method1(...) NEWLINE .method2(...) NEWLINE .method3(...)"/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="id" value="UseMultilineTernaryOperator"/>
      <property name="format" value='^[^\?]*?(?&lt;!(\&lt;|,|,\h))\?\s*+$|^[^:]*?:\s*+$|^[^"]*?[^\s"]+?\s*?(?&lt;!(\&lt;|,|,\h))\?(?![:\&gt;\.]).*$|^[^"]*?[^\s":]+?\s*?:[^:]*$|^[^"]*?"[^"]*?"[^"]*?(?&lt;!(\&lt;|,|,\h))\?(?![:\&gt;\.]).*$|^[^"]*?"[^"]*?"[^"]*?:[^"]*$' />
      <property name="ignoreComments" value="true"/>
      <message key="regexp.exceeded" value="Expand ternary operator in multiple lines: condition NEWLINE ? expression NEWLINE : expression"/>
    </module>
    <module name="RightCurly">
      <property name="option" value="alone"/>
      <property name="tokens" value="CLASS_DEF, INSTANCE_INIT, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_TRY, LITERAL_WHILE, METHOD_DEF, STATIC_INIT"/>
    </module>
    <!-- Documentation -->
    <module name="JavadocStyle">
      <property name="checkEmptyJavadoc" value="true"/>
    </module>
    <module name="NonEmptyAtclauseDescription"/>
    <!-- Imports -->
    <module name="AvoidStarImport"/>
    <module name="AvoidStaticImport"/>
    <module name="CustomImportOrder">
      <property name="customImportOrderRules" value="SAME_PACKAGE(2)###THIRD_PARTY_PACKAGE###STATIC"/>
      <property name="sortImportsInGroupAlphabetically" value="true"/>
    </module>
    <module name="IllegalImport"/>
    <module name="RedundantImport"/>
    <module name="UnusedImports"/>
    <!-- Naming -->
    <module name="AbbreviationAsWordInName">
      <property name="allowedAbbreviationLength" value="0"/>
      <property name="ignoreStatic" value="false"/>
    </module>
    <module name="AbstractClassName"/>
    <module name="AvoidEscapedUnicodeCharacters"/>
    <module name="ClassTypeParameterName">
      <property name="format" value="^[A-Z][A-Z_][A-Z_0-9]{1,22}$"/>
    </module>
    <module name="InterfaceTypeParameterName">
      <property name="format" value="^[A-Z][A-Z_][A-Z_0-9]{1,22}$"/>
    </module>
    <module name="ConstantName">
      <property name="id" value="ConstantName"/>
      <property name="format" value="^[A-Z](_?[A-Z0-9]{1}){2,22}$|^[a-z]([A-Z][a-z0-9]|[a-z0-9][A-Z]|[a-z0-9]{2}){1}([A-Z]?[a-z0-9]{1}){0,19}[a-zA-Z0-9]?$"/>
    </module>
    <module name="ConstantName">
      <property name="id" value="ConstantNameLength"/>
      <property name="format" value="^[A-Z_0-9]{3,32}$|^[a-zA-Z0-9]{3,23}$"/>
      <message key="name.invalidPattern" value="Constant name length is invalid: ''{0}'' (min: 3, max: 23/32(Uppercase))"/>
    </module>
    <module name="LambdaParameterName">
      <property name="format" value="^at$|^by$|^id$|^in$|^of$|^on$|^to$|^up$|^[a-z]([A-Z][a-z0-9]|[a-z0-9][A-Z]|[a-z0-9]{2}){1}([A-Z]?[a-z0-9]{1}){0,19}[a-zA-Z0-9]?$"/>
    </module>
    <module name="LocalFinalVariableName">
      <property name="format" value="^K$|^[a-z]([A-Z][a-z0-9]|[a-z0-9][A-Z]|[a-z0-9]{2}){1}([A-Z]?[a-z0-9]{1}){0,19}[a-zA-Z0-9]?$"/>
    </module>
    <module name="LocalVariableName">
      <property name="format" value="^at$|^by$|^id$|^in$|^k$|^of$|^on$|^to$|^up$|^[a-z]([A-Z][a-z0-9]|[a-z0-9][A-Z]|[a-z0-9]{2}){1}([A-Z]?[a-z0-9]{1}){0,19}[a-zA-Z0-9]?$"/>
    </module>
    <module name="MemberName">
      <property name="format" value="^at$|^by$|^id$|^in$|^of$|^on$|^to$|^up$|^[a-z]([A-Z][a-z0-9]|[a-z0-9][A-Z]|[a-z0-9]{2}){1}([A-Z]?[a-z0-9]{1}){0,19}[a-zA-Z0-9]?$"/>
    </module>
    <module name="MethodName">
      <property name="format" value="^of$|^[a-z]([A-Z][a-z0-9]|[a-z0-9][A-Z]|[a-z0-9]{2}){1}([A-Z]?[a-z0-9]{1}){0,19}[a-zA-Z0-9]?$"/>
    </module>
    <module name="MethodTypeParameterName">
      <property name="format" value="^[A-Z][A-Z_][A-Z_0-9]{1,22}$"/>
    </module>
    <module name="PackageDeclaration"/>
    <module name="PackageName"/>
    <module name="ParameterName">
      <property name="format" value="^at$|^by$|^id$|^in$|^of$|^on$|^to$|^up$|^[a-z]([A-Z][a-z0-9]|[a-z0-9][A-Z]|[a-z0-9]{2}){1}([A-Z]?[a-z0-9]{1}){0,19}[a-zA-Z0-9]?$"/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="id" value="UseOnlyMockOrSpyPrefixOnTestFiles"/>
      <property name="format" value='\b(mock|spy)[A-Z0-9]' />
      <property name="ignoreComments" value="true"/>
      <message key="regexp.exceeded" value="Use the 'mock' or 'spy' prefixes only on test's files' code"/>
    </module>
    <module name="StaticVariableName"/>
    <module name="TypeName">
      <property name="id" value="TypeName"/>
      <property name="format" value="^[A-Z][a-z0-9][A-Z]([a-z0-9]([A-Z]?[a-z0-9]{1}){0,29}[a-zA-Z0-9]?)?$|^[A-Z][a-z0-9]{2}([A-Z]?[a-z0-9]{1}){0,29}[a-zA-Z0-9]?$"/>
    </module>
    <module name="TypeName">
      <property name="id" value="TestTypeName"/>
      <property name="format" value="^[A-Z][a-z0-9]([A-Z]?[a-z0-9]{1})*Test$"/>
    </module>
    <module name="UpperEll"/>
    <!-- Objects -->
    <module name="FinalClass"/>
    <module name="FinalLocalVariable"/>
    <module name="FinalParameters"/>
    <module name="InterfaceIsType"/>
    <module name="ModifierOrder"/>
    <module name="MutableException"/>
    <module name="OneTopLevelClass"/>
    <module name="RedundantModifier"/>
    <module name="VisibilityModifier">
      <property name="protectedAllowed" value="true"/>
      <property name="allowPublicFinalFields" value="true"/>
    </module>
    <!-- Size -->
    <module name="AnonInnerLength"/>
    <module name="CyclomaticComplexity">
      <property name="max" value="8"/>
    </module>
    <module name="LineLength">
      <property name="max" value="144"/>
      <property name="ignorePattern" value='^\h*.{0,2}".*"[\?\+\)\(\}\]\[\.\=:,;]*$|^package\s|^import\s|public void should\w*()|file://|http://|https://|ftp://|classpath:|jar:|zip:|find\w*By\w*\(|read\w*By\w*\(|query\w*By\w*\(|get\w*By\w*\(|count\w*By\w*\('/>
    </module>
    <module name="MethodCount">
      <property name="maxPublic" value="12"/>
    </module>
    <module name="MethodLength">
      <property name="max" value="30"/>
    </module>
    <module name="ParameterNumber">
      <property name="max" value="7"/>
      <property name="ignoreOverriddenMethods" value="true"/>
    </module>
    <module name="VariableDeclarationUsageDistance">
      <property name="allowedDistance" value="6"/>
      <property name="ignoreFinal" value="false"/>
    </module>
    <!-- Spaces -->
    <module name="CommentsIndentation"/>
    <module name="EmptyForInitializerPad"/>
    <module name="EmptyLineSeparator">
      <property name="allowNoEmptyLineBetweenFields" value="true"/>
      <property name="allowMultipleEmptyLines" value="false"/>
      <property name="allowMultipleEmptyLinesInsideClassMembers" value="false"/>
      <property name="tokens" value="IMPORT, STATIC_IMPORT, CLASS_DEF, INTERFACE_DEF, ENUM_DEF, STATIC_INIT, INSTANCE_INIT, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
    </module>
    <module name="GenericWhitespace"/>
    <module name="Indentation">
      <property name="basicOffset" value="2"/>
      <property name="caseIndent" value="2"/>
      <property name="throwsIndent" value="2"/>
      <property name="arrayInitIndent" value="2"/>
      <property name="lineWrappingIndentation" value="2"/>
    </module>
    <module name="MethodParamPad"/>
    <module name="NoLineWrap"/>
    <module name="SingleSpaceSeparator"/>
    <module name="OperatorWrap"/>
  </module>
  <module name="FileLength">
    <property name="max" value="300"/>
  </module>
  <module name="RegexpMultiline">
    <property name="id" value="NameOfTestsMustStartWithShould"/>
    <property name="format" value='(@Test|@org\.junit\.jupiter\.api\.Test|@org\.junit\.Test|@org\.testng\.annotations\.Test)\s+(public|protected)\s+void(?!\s+should)' />
    <message key="regexp.exceeded" value="Name of the Test method must begin with 'should'"/>
  </module>
  <module name="RegexpMultiline">
    <property name="id" value="UseDoFamilyMethodsWhenStubbing"/>
    <property name="format" value='\bMockito\s*\.\s*when\b' />
    <message key="regexp.exceeded" value="Use &#34;do*&#34;'s family methods when using Mockito: doAnswer, doCallRealMethod, doNothing, doReturn &amp; doThrow"/>
  </module>
  <module name="RegexpMultiline">
    <property name="id" value="UseOnlyWillFamilyMethodsWhenStubbing"/>
    <property name="format" value='\bBDDMockito\s*\.\s*given\b|\bBDDMockito\s*\.\s*when\b' />
    <message key="regexp.exceeded" value="Use only &#34;will*&#34;'s family methods when using BDD Mockito: will, willAnswer, willCallRealMethod, willDoNothing, willReturn &amp; willThrow"/>
  </module>
  <module name="RegexpMultiline">
    <property name="id" value="UseOnlyThenFamilyMethodsWhenMocking"/>
    <property name="format" value='\bBDDMockito\s*\.\s*verify\b' />
    <message key="regexp.exceeded" value="Use only &#34;then&#34;'s family methods when using BDD Mockito: then(..).should(..)"/>
  </module>
  <module name="RegexpMultiline">
    <property name="id" value="DoNotMixBDDandTDD"/>
    <property name="format" value='\borg\.mockito\.Mockito\b[\S\s]*\borg\.mockito\.BDDMockito\b|\borg\.mockito\.BDDMockito\b[\S\s]*\borg\.mockito\.Mockito\b' />
    <message key="regexp.exceeded" value="Use either org.mockito.BDDMockito or org.mockito.Mockito, not both at the same time."/>
  </module>
  <module name="RegexpMultiline">
    <property name="id" value="PreferBDDTesting"/>
    <property name="format" value='\borg\.mockito\.Mockito\b|\bdoAnswer\s*\(|\bdoCallRealMethod\s*\(|\bdoNothing\s*\(|\bdoReturn\s*\(|\bdoThrow\s*\(|\bverify\s*\(' />
    <property name="severity" value="warning"/>
    <message key="regexp.exceeded" value="Prefer BDD Testing when using Mockito, use org.mockito.BDDMockito's methods: will, willAnswer, willCallRealMethod, willDoNothing, willReturn, willThrow &amp; then"/>
  </module>
  <module name="SuppressionFilter">
    <property name="file" value="${suppressionFile}" default="dummy.xml"/>
    <property name="optional" value="true"/>
  </module>
</module>
